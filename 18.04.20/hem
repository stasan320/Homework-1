#include <iostream>
#include <bitset>
#include <vector>
#include <cmath>

using namespace std;

int main() {
	int k, n, st = 0, c, sum = 0, l2 = 0, bit[8], del[2];
	string data;

	cout << "Enter k: ";
	cin >> k;
	cout << "Enter n: ";
	cin >> n;
	cout << "Enter your text:";
	cin >> data;

	c = n * 8 + floor(log2(n * 8)) + 1;

	if (data.length() != (n * k)) {
		cout << "Error" << endl;
		exit(0);
	}
	
	vector<vector<int> > bin_data(k, vector<int>(c, 0));                                           //костыль
	vector<vector<int> > sum_data(k, vector<int>(floor(log2(n * 8)) + 1));

	for (int i = 0; i < k; i++) {
		cout << "Data #" << i + 1 << " ";
		for (int j = 0; j < c; j++) {
			if (log2(j + 1) != st) {
				if ((j - st) % 8 == 0) {
					std::bitset<CHAR_BIT> b(data[i * n + sum]);
					sum++;
					l2 = 0;
					for (int l = 0; l < 8; l++) {
						bit[l] = b[7 - l];
						cout << bit[l];
					}
					cout << " ";
				}
				bin_data[i][j] = bit[l2];
				l2++;
			}
			else {
				st++;
			}
		}
		cout << endl;
		st = 0;
		sum = 0;
	}	

	for (int i = 0; i < k; i++) {
		for (int l = 0; l < (floor(log2(n * 8)) + 1); l++) {
			for (int j = (pow(2, l) - 1); j < c; j = j + pow(2, l + 1)) {
				for (int j2 = 0; j2 < pow(2, l); j2++) {
					if ((j + j2) < c) {
						sum_data[i][l] = sum_data[i][l] + bin_data[i][j + j2];
					}
				}
			}
			if (sum_data[i][l] % 2 == 0) {
				sum_data[i][l] = 0;
			}
			else {
				sum_data[i][l] = 1;
			}
		}
	}

	cout << "Enter number k: ";
	cin >> del[0];
	cout << "Enter number n: ";
	cin >> del[1];

	if (bin_data[del[0] - 1][del[1] - 1] == 1) {
		bin_data[del[0] - 1][del[1] - 1] = 0;
	}
	else {
		bin_data[del[0] - 1][del[1] - 1] = 1;
	}

	for (int i = 0; i < k; i++) {
		cout << "Damaged data #" << i + 1 << " ";
		for (int j = 0; j < c; j++) {
			if ((j - st) % 8 == 0) {
				cout << " ";
			}
			if (log2(j + 1) != st) {
				cout << bin_data[i][j];
			}
			else {
				st++;
			}
		}
		cout << endl;
		st = 0;
	}

	for (int i = 0; i < k; i++) {
		for (int l = 0; l < (floor(log2(n * 8)) + 1); l++) {
			for (int j = (pow(2, l) - 1); j < c; j = j + pow(2, l + 1)) {
				for (int j2 = 0; j2 < pow(2, l); j2++) {
					if ((j + j2) < c) {
						bin_data[i][pow(2, l) - 1] = bin_data[i][pow(2, l) - 1] + bin_data[i][j + j2];
					}
				}
			}
			if (bin_data[i][pow(2, l) - 1] % 2 == 0) {
				bin_data[i][pow(2, l) - 1] = 0;
			}
			else {
				bin_data[i][pow(2, l) - 1] = 1;
			}
		}
	}

	for (int i = 0; i < k; i++) {
		for (int j = 0; j < (floor(log2(n * 8)) + 1); j++) {
			if (sum_data[i][j] != bin_data[i][pow(2, j) - 1]) {
				sum = sum + pow(2, j);
				st++;
			}
		}
		if (st != 0) {
			if (bin_data[i][sum - 1] == 1) {
				bin_data[i][sum - 1] = 0;
			}
			else {
				bin_data[i][sum - 1] = 1;
			}
		}
		st = 0;
		sum = 0;
	}

	for (int i = 0; i < k; i++) {
		cout << "Restored data #" << i + 1;
		for (int j = 0; j < c; j++) {
			if ((j - st) % 8 == 0) {
				cout << " ";
			}
			if (log2(j + 1) != st) {
				cout << bin_data[i][j];
			}
			else {
				st++;
			}
		}
		st = 0;
	cout << endl;
	}
}
